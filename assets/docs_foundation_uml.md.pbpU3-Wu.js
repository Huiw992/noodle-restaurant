import{_ as t,c as a,o as e,ag as n}from"./chunks/framework.Dm51NjPT.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/foundation/uml.md","filePath":"docs/foundation/uml.md","lastUpdated":1740321489000}'),i={name:"docs/foundation/uml.md"};function l(r,s,o,p,d,c){return e(),a("div",null,s[0]||(s[0]=[n(`<h2 id="对象和类之间相互关系" tabindex="-1">对象和类之间相互关系 <a class="header-anchor" href="#对象和类之间相互关系" aria-label="Permalink to &quot;对象和类之间相互关系&quot;">​</a></h2><p>UML 中描述对象和类之间相互关系的方式包括：<strong>依赖</strong>（Dependency），<strong>关联</strong>（Association），<strong>聚合</strong>（Aggregation），<strong>组合</strong>（Composition），<strong>泛化</strong>（Generalization），<strong>实现</strong>（Realization）等。</p><h2 id="含义" tabindex="-1">含义 <a class="header-anchor" href="#含义" aria-label="Permalink to &quot;含义&quot;">​</a></h2><p><strong>泛化</strong>（Generalization）：通常所说的继承（特殊个体 is kind of 一般个体）关系，不必多解释了。UML 用带空心箭头的实线线表示 Generalization 关系，箭头指向一般个体。 实现（Realize）：元素 A 定义一个约定，元素 B 实现这个约定，则 B 和 A 的关系是 Realize，B realize A。这个关系最常用于接口。UML 用空心箭头和虚线表示 Realize 关系，箭头指向定义约定的元素。 <strong>聚合</strong>（Aggregation）：关联关系的一种特例，表示部分和整体（整体 has a 部分）的关系。UML 用带空心菱形头的实线表示 Aggregation 关系，菱形头指向整体。 组合（Composition）：组合是聚合关系的变种，表示元素间更强的组合关系。如果是组合关系，如果整体被破坏则个体一定会被破坏，而聚合的个体则可能是被多个整体所共享的，不一定会随着某个整体的破坏而被破坏。UML 用带实心菱形头的实线表示 Composition 关系，菱形头指向整体。 <strong>依赖</strong>（Dependency）：元素 A 的变化会影响元素 B，但反之不成立，那么 B 和 A 的关系是依赖关系，B 依赖 A；类属关系和实现关系在语义上讲也是依赖关系，但由于其有更特殊的用途，所以被单独描述。UML 用带箭头的虚线表示 Dependency 关系，箭头指向被依赖元素。 <strong>关联</strong>（Association）：元素间的结构化关系，是一种弱关系，被关联的元素间通常可以被独立的考虑。UML 用实线表示 Association 关系，箭头指向被依赖元素。</p><h2 id="五种类间关系的图形表示介绍" tabindex="-1">五种类间关系的图形表示介绍： <a class="header-anchor" href="#五种类间关系的图形表示介绍" aria-label="Permalink to &quot;五种类间关系的图形表示介绍：&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:center;">关联</th><th style="text-align:center;">依赖</th><th style="text-align:center;">聚集</th><th style="text-align:center;">泛化 extends</th><th style="text-align:center;">实现 implements</th></tr></thead><tbody><tr><td style="text-align:center;">带实线的箭头</td><td style="text-align:center;">带虚线的箭头</td><td style="text-align:center;">菱形箭头</td><td style="text-align:center;">带实线的三角形箭头</td><td style="text-align:center;">带虚线的三角形箭头 implements</td></tr></tbody></table><div class="language-mermaid vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">classDiagram</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ClassA &lt;-- ClassB:关联</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ClassA &lt;.. ClassB : 依赖</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ClassA o-- ClassB:聚集</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ClassA &lt;|-- ClassB:泛化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ClassA &lt;|.. ClassB:实现</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,7)]))}const m=t(i,[["render",l]]);export{g as __pageData,m as default};
